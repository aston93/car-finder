name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: car-finder-dev
  GKE_CLUSTER: dev-gke-cluster
  GKE_ZONE: europe-west4-a
  FRONTEND_IMAGE: car-finder-frontend
  BACKEND_IMAGE: car-finder-backend

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || echo "Linting not configured"

  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        cd backend
        pytest --cov=. || echo "No tests found"
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    
    - name: Build Frontend Docker image
      run: |
        cd frontend
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA .
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:latest .
    
    - name: Build Backend Docker image
      run: |
        cd backend
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA .
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_IMAGE:latest .
    
    - name: Push Docker images
      run: |
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:latest
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:latest
    
    - name: Update ConfigMaps
      run: |
        kubectl apply -f k8s/frontend/configmap.yaml
        kubectl apply -f k8s/backend/configmap.yaml
    
    - name: Deploy to GKE
      run: |
        # Update image tags in deployments
        kubectl set image deployment/car-finder-frontend frontend=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        kubectl set image deployment/car-finder-backend backend=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA
        
        # Wait for rollout to complete
        kubectl rollout status deployment/car-finder-frontend
        kubectl rollout status deployment/car-finder-backend
    
    - name: Verify deployment
      run: |
        kubectl get services
        kubectl get pods
        
        # Test frontend health
        FRONTEND_IP=$(kubectl get service car-finder-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Frontend available at: http://$FRONTEND_IP"
        
        # Test backend health
        BACKEND_IP=$(kubectl get service car-finder-backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Backend available at: http://$BACKEND_IP:8000"
        
        # Simple health checks
        curl -f http://$BACKEND_IP:8000/ || echo "Backend health check failed"

  notification:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "Frontend: http://34.34.95.85"
          echo "Backend: http://34.12.88.58:8000"
        else
          echo "❌ Deployment failed!"
        fi
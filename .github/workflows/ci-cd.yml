name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: car-finder-dev
  GKE_CLUSTER: dev-gke-cluster
  GKE_ZONE: europe-west4-a

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run tests
      run: |
        cd frontend
        npm test
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || echo "Linting completed with warnings"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx
    
    - name: Run tests
      run: |
        cd backend
        pytest test_main.py --cov=main --cov-report=xml --cov-report=term
    
    - name: Run linting
      run: |
        cd backend
        pip install flake8
        flake8 main.py --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    
    - name: Update Frontend ConfigMap
      run: |
        # Update frontend configmap with latest code
        kubectl apply -f k8s/frontend/configmap.yaml
        
        # Verify configmap was updated
        kubectl get configmap frontend-code-files -o yaml | head -10
    
    - name: Update Backend ConfigMap
      run: |
        # Update backend configmap with latest code
        kubectl apply -f k8s/backend/configmap.yaml
        
        # Verify configmap was updated
        kubectl get configmap backend-code-files -o yaml | head -10
    
    - name: Deploy Frontend
      run: |
        # Apply deployment configuration
        kubectl apply -f k8s/frontend/deployment.yaml
        
        # Restart deployment to pick up new configmap
        kubectl rollout restart deployment/car-finder-frontend
        
        # Wait for rollout to complete
        kubectl rollout status deployment/car-finder-frontend --timeout=300s
    
    - name: Deploy Backend
      run: |
        # Apply deployment configuration
        kubectl apply -f k8s/backend/deployment.yaml
        
        # Restart deployment to pick up new configmap
        kubectl rollout restart deployment/car-finder-backend
        
        # Wait for rollout to complete
        kubectl rollout status deployment/car-finder-backend --timeout=300s
    
    - name: Verify Deployment
      run: |
        # Get service status
        kubectl get services
        kubectl get pods
        
        # Get external IPs
        FRONTEND_IP=$(kubectl get service car-finder-frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        BACKEND_IP=$(kubectl get service car-finder-backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        echo "Frontend deployed at: http://$FRONTEND_IP"
        echo "Backend deployed at: http://$BACKEND_IP:8000"
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Health checks
        echo "Testing backend health..."
        curl -f http://$BACKEND_IP:8000/health || echo "Backend health check failed"
        
        echo "Testing backend version..."
        curl -f http://$BACKEND_IP:8000/ || echo "Backend API check failed"
        
        # Test cars endpoint
        echo "Testing cars endpoint..."
        curl -f http://$BACKEND_IP:8000/cars || echo "Cars endpoint check failed"
    
    - name: Cleanup Failed Pods
      if: failure()
      run: |
        echo "Cleaning up failed pods..."
        kubectl get pods --field-selector=status.phase=Failed -o name | xargs -r kubectl delete
        
        # Show pod logs for debugging
        kubectl logs -l app=car-finder-backend --tail=50 || echo "No backend logs available"
        kubectl logs -l app=car-finder-frontend --tail=50 || echo "No frontend logs available"

  notification:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Get deployment info
      run: |
        echo "FRONTEND_URL=http://34.34.95.85" >> $GITHUB_ENV
        echo "BACKEND_URL=http://34.12.88.58:8000" >> $GITHUB_ENV
    
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🌐 Frontend: $FRONTEND_URL"
          echo "🔧 Backend API: $BACKEND_URL"
          echo "📊 Health: $BACKEND_URL/health"
          echo "🚗 Cars API: $BACKEND_URL/cars"
        else
          echo "❌ Deployment failed!"
          echo "Check the workflow logs for details."
        fi
    
    - name: Create deployment comment
      if: github.event_name == 'push'
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ needs.deploy.result }}' === 'success' ? '✅ Deployed successfully!' : '❌ Deployment failed!';
          const frontendUrl = process.env.FRONTEND_URL;
          const backendUrl = process.env.BACKEND_URL;
          
          const message = `## 🚀 Deployment Status: ${status}
          
          **Frontend:** ${frontendUrl}
          **Backend API:** ${backendUrl}
          **Health Check:** ${backendUrl}/health
          
          **Commit:** ${context.sha.substring(0, 7)}
          **Branch:** ${context.ref.replace('refs/heads/', '')}
          **Workflow:** [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})`;
          
          // Create a comment on the latest commit
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          });
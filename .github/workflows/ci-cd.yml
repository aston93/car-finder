name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --coverage --verbose
      env:
        CI: true
    
    - name: Upload frontend coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
    
    - name: Build project
      working-directory: ./frontend
      run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      working-directory: ./backend
      run: pytest tests/ test_main.py -v --tb=short --cov=main --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Upload backend coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/htmlcov/
    
    - name: Lint code
      working-directory: ./backend
      run: |
        pip install flake8
        flake8 main.py --max-line-length=120 --ignore=E501,W503 || true

  deploy:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup credentials file
      run: |
        echo '${{ secrets.GCP_SA_KEY_BASE64 }}' | base64 -d > /tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'
    
    - name: Authenticate with service account
      run: |
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project car-finder-dev
    
    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials dev-gke-cluster \
          --zone=europe-west4-a \
          --project=car-finder-dev
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
    
    - name: Update ConfigMaps
      run: |
        kubectl apply -f k8s/backend/configmap.yaml
        kubectl apply -f k8s/frontend/configmap.yaml
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
    
    - name: Restart Deployments
      run: |
        echo "Current pod status:"
        kubectl get pods
        
        echo "Restarting backend deployment..."
        kubectl rollout restart deployment/car-finder-backend
        
        echo "Restarting frontend deployment..."
        kubectl rollout restart deployment/car-finder-frontend
        
        # Force delete any stuck terminating pods
        kubectl get pods --field-selector=status.phase=Failed -o name | xargs -r kubectl delete
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
    
    - name: Wait for rollout
      run: |
        echo "Waiting for backend rollout..."
        kubectl rollout status deployment/car-finder-backend --timeout=300s || {
          echo "Backend rollout timed out, checking pod status..."
          kubectl get pods -l app=car-finder-backend
          kubectl describe deployment car-finder-backend
        }
        
        echo "Waiting for frontend rollout..."
        kubectl rollout status deployment/car-finder-frontend --timeout=300s || {
          echo "Frontend rollout timed out, checking pod status..."
          kubectl get pods -l app=car-finder-frontend
          kubectl describe deployment car-finder-frontend
        }
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True
    
    - name: Verify deployment
      run: |
        echo "=== Final Pod Status ==="
        kubectl get pods -o wide
        
        echo "=== Services Status ==="
        kubectl get services
        
        echo "=== Deployment Status ==="
        kubectl get deployments
        
        # Check if deployments are ready (but don't fail if not)
        BACKEND_READY=$(kubectl get deployment car-finder-backend -o jsonpath='{.status.readyReplicas}' || echo "0")
        FRONTEND_READY=$(kubectl get deployment car-finder-frontend -o jsonpath='{.status.readyReplicas}' || echo "0")
        
        echo "Backend ready replicas: $BACKEND_READY"
        echo "Frontend ready replicas: $FRONTEND_READY"
        
        if [ "$BACKEND_READY" -gt "0" ] && [ "$FRONTEND_READY" -gt "0" ]; then
          echo "‚úÖ Deployment completed successfully!"
        else
          echo "‚ö†Ô∏è Deployment may still be in progress"
        fi
        
        echo "üåê Frontend: http://34.34.95.85"
        echo "üîß Backend: http://34.12.88.58:8000"
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True